package com.jxust.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.Vector;

import javax.annotation.Resource;

import org.apache.struts2.ServletActionContext;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;


import com.jxust.bean.AttachFile;
import com.jxust.bean.Homework;
import com.jxust.service.AttachFileService;
import com.jxust.service.HomeworkService;
import com.jxust.service.ToolsService;
import com.jxust.util.PageToolBar;
import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.ModelDriven;

@Controller
@Scope("prototype")
public class HomeworkUploadAction extends ActionSupport implements ModelDriven<Homework>{

	private Homework homework;
	
	public Homework getHomework() {
		return homework;
	}
	public void setHomework(Homework homework) {
		this.homework = homework;
	}

	private AttachFile attachFile[]=new AttachFile[20];
	private AttachFile attachment=new AttachFile();
	
	
	public AttachFile getAttachment() {
		return attachment;
	}
	public void setAttachment(AttachFile attachment) {
		this.attachment = attachment;
	}
	public AttachFile[] getAttachFile() {
		return attachFile;
	}
	public void setAttachFile(AttachFile[] attachFile) {
		this.attachFile = attachFile;
	}

	@Resource
	private ToolsService toolsService;
	@Resource
	private HomeworkService homeworkService;
	@Resource
	private AttachFileService attachFileService;
	private File[] attach;
	private String[] attachFileName;
	private String[] attachContentType;
	private Long fileId;
	private String homeworkselect;
	

	public String getHomeworkselect() {
		return homeworkselect;
	}
	public void setHomeworkselect(String homeworkselect) {
		this.homeworkselect = homeworkselect;
	}

	private PageToolBar toolBar;
	private int pageSize = 8;
	public PageToolBar getToolBar() {
		return toolBar;
	}
	public void setToolBar(PageToolBar toolBar) {
		this.toolBar = toolBar;
	}
	public int getPageSize() {
		return pageSize;
	}
	public void setPageSize(int pageSize) {
		this.pageSize = pageSize;
	}
	public int getCurrentPage() {
		return currentPage;
	}
	public void setCurrentPage(int currentPage) {
		this.currentPage = currentPage;
	}

	private int currentPage = 1;

	public void setFileId(Long fileId) {
		this.fileId = fileId;
	}
	public Long getFileId() {
		return fileId;
	}

	private String contentType;
	private long contentLength;
	private String contentDisposition;
	private InputStream inputStream;
	public String getContentType() {
		return contentType;
	}
	public long getContentLength() {
		return contentLength;
	}
	public String getContentDisposition() {
		return contentDisposition;
	}
	public InputStream getInputStream() {
		return inputStream;
	}

	public File[] getAttach() {
		return attach;
	}
	public void setAttach(File[] attach) {
		this.attach = attach;
	}
	public String[] getAttachFileName() {
		return attachFileName;
	}
	public void setAttachFileName(String[] attachFileName) {
		this.attachFileName = attachFileName;
	}
	public String[] getAttachContentType() {
		return attachContentType;
	}
	public void setAttachContentType(String[] attachContentType) {
		this.attachContentType = attachContentType;
	}

	public Homework getModel() {
		// TODO Auto-generated method stub
		return homework;
	}
	//进入页面准备数据
	public String addTeacherList()throws Exception{
		List teacherList=toolsService.findTeachter(14);
		ActionContext.getContext().put("teacherList", teacherList);
		return "toAddTeacherList";
	}
	
	//提交作业
	public String uploadHomework()throws Exception{
		FileInputStream fis=null;
		FileOutputStream fos=null;
		/* 文件上传 */
		try{
			for (int i = 0; i < attach.length; i++) {
				
				fis=new FileInputStream(attach[i]);
				fos=new FileOutputStream(ServletActionContext.getServletContext().getRealPath("attachFiles/")+"\\"+attachFileName[i]);
				int length = 0;
				byte[] buffer = new byte[1024];//定义缓冲区
				while((length=fis.read(buffer))!=-1){
					fos.write(buffer, 0, length);//将文件写入outputstream流中
				}
			}
			fis.close();
			fos.close();
		}catch(Exception e){
		List teacherList=toolsService.findTeachter(14);
		ActionContext.getContext().put("teacherList", teacherList);
		ActionContext.getContext().put("error", "文件上传失败，请重新上传！");
		return "toUploadError";
		}
	
		SimpleDateFormat sdf = new SimpleDateFormat("YYYY-MM-dd HH:mm");
		homework.setTopic(homework.getTopic()+" + "+sdf.format(new Date()));//按要求给标题添加时间戳
		homeworkService.save(homework);
		for (int i = 0; i < attach.length; i++) {
			if(attachFile[i]==null){attachFile[i]=new AttachFile();}
			attachFile[i].setHomework(homework);//附件与homework外键关联
			//attachFile[i].setFile(attachFileName[i]);
		}
		attachFileService.save(attachFile,attachFileName);
		
		
		return"toUploadHomework";
	}
	//后台数据装载
	public String backAddHomework()throws Exception{
		if(homework==null){
			homework=new Homework();
		}
		String hql=homeworkService.getQueryHQL(homework,homeworkselect);//根据选择查询条件得到hql语句
		 int homeworkCount=homeworkService.getCountByHQL(hql);//根据hql语句查询记录总数
		 if(getToolBar()==null){
			   setToolBar(new PageToolBar(homeworkCount,pageSize));
			   
		   }
		   else{
			   getToolBar().setResultsetCount(homeworkCount);
				getToolBar().setPageSize(pageSize);
		   }
		 List backHomeworkList=homeworkService.getListForPage(hql, toolBar.getStartRow(), toolBar.getEndRow());
		 /*先通过把外键关联的附件迭代出来，再得到主键id，方便页面迭代附件*/
		List<AttachFile> attachList=new ArrayList<AttachFile>();
		for (Iterator iterator = backHomeworkList.iterator(); iterator
				.hasNext();) {
			Homework hmk = (Homework) iterator.next();
			
		 Set<AttachFile> attachment=hmk.getHomeworkAttachFile();
	          for (Iterator iterator2 = attachment.iterator(); iterator2
					.hasNext();) {
				AttachFile attachFile = (AttachFile) iterator2.next();	
				attachFile.setAttachId(attachFile.getHomework().getId());
				//attachIdList.add(attachFile.getHomework().getId());
				attachList.add(attachFile);
			}
		}
		
		ActionContext.getContext().put("attachVector", attachList);
		//ActionContext.getContext().put("attachIdList", attachIdList);
		ActionContext.getContext().put("backHomeworkList", backHomeworkList);
		return"tobackAddHomework";
	}
	/*
	 * 文件下载
	 * */
	public String homeworkDownload()throws Exception{
		AttachFile attachments=attachFileService.getById(fileId);
		/*处理中文问题*/
		String fileName=new String(attachments.getFile().getBytes(),"ISO8859-1");
		 contentType="application/octet-stream";
			contentDisposition="attachment;filename="+fileName;
			try{
				String path=ServletActionContext.getServletContext().getRealPath("attachFiles");
				File file=new File(path,attachments.getFile());
		inputStream=new FileInputStream(file);
		contentLength=inputStream.available();
			}catch(Exception e){
				ActionContext.getContext().put("error", attachments.getFile()+"文件不存在！");
				
				return"toHomeworkDownloadError";
			}
		return"tohomeworkDownload";
	}
	public String delete(){
		homeworkService.delete(homework.getId());
		return"todelete";
	}
	public String batchhomeworkDelete(){
		int size=homeworkService.findAllSize();
		if(size<=0){
			return "deleteError";
		}else{
			homeworkService.batchDelete();
			return "todelete";
		}
	}
	

}
